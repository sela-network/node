import { app, BrowserWindow, ipcMain, session } from 'electron';
import path from 'path';

import {
	clearTelegramAuth,
	getAuthToken,
	setAuthToken,
	telegramLogin,
} from './node/telegram.utils';
import {
	createTwitterLoginWindow,
	getTwitterUsername,
	isTwitterLoggedIn,
	logoutTwitter,
} from './node/twitter.utils';

// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;
const RESET_APP_ON_STARTUP = true;
// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require('electron-squirrel-startup')) {
	app.quit();
}

const createWindow = (): void => {
	// Create the browser window.
	const mainWindow = new BrowserWindow({
		// height: 710,
		height: 800,
		// width: 400,
		width: 430,
		resizable: false,
		autoHideMenuBar: true,
		webPreferences: {
			preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
			webviewTag: true,
		},
	});

	mainWindow.webContents.setWindowOpenHandler(({ url }) => {
		if (url === 'about:blank') {
			return {
				action: 'allow',
				overrideBrowserWindowOptions: {
					frame: false,
					fullscreenable: false,
					backgroundColor: 'black',
					webPreferences: {
						preload: 'my-child-window-preload-script.js',
					},
				},
			};
		}
		return { action: 'allow' };
	});

	ipcMain.handle('telegram-login', telegramLogin);
	ipcMain.handle('get-token', getAuthToken);
	ipcMain.on('set-token', setAuthToken);
	ipcMain.handle('open-twitter-auth', createTwitterLoginWindow);
	ipcMain.handle('is-twitter-logged-in', isTwitterLoggedIn);
	ipcMain.handle('get-twitter-username', getTwitterUsername);
	ipcMain.handle('logout-twitter', logoutTwitter);

	// and load the index.html of the app.
	void mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);

	// Open the DevTools.
	// mainWindow.webContents.openDevTools();
};

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
app.on('ready', () => {
	session.defaultSession.protocol.registerFileProtocol(
		'static',
		(request, callback) => {
			const fileUrl = request.url.replace('static://', '');
			const filePath = path.join(
				app.getAppPath(),
				'.webpack/renderer',
				fileUrl,
			);
			callback(filePath);
		},
	);

	if (RESET_APP_ON_STARTUP) {
		logoutTwitter();
		clearTelegramAuth();
	}

	createWindow();
});

// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
app.on('window-all-closed', () => {
	if (process.platform !== 'darwin') {
		app.quit();
	}
});

app.on('activate', () => {
	// On OS X it's common to re-create a window in the app when the
	// dock icon is clicked and there are no other windows open.
	if (BrowserWindow.getAllWindows().length === 0) {
		createWindow();
	}
});

// app.setLoginItemSettings({
// 	openAtLogin: true
// })
// In this file you can include the rest of your app's specific main process
// code. You can also put them in separate files and import them here.
